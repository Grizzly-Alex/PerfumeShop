// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerfumeShop.Infrastructure.DataAccess.DbContexts;

#nullable disable

namespace PerfumeShop.Infrastructure.DataAccess.Migrations.Sale
{
    [DbContext(typeof(SaleDbContext))]
    [Migration("20230518191637_InitialMigrtation")]
    partial class InitialMigrtation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("Id");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("OrderDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShippingDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "InProcess"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Refunded"
                        });
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.PaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2")
                        .HasColumnName("PaymentDate");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentStatusId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reject"
                        });
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.BasketItem", b =>
                {
                    b.HasOne("PerfumeShop.Core.Models.Entities.Basket", null)
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.OrderHeader", b =>
                {
                    b.HasOne("PerfumeShop.Core.Models.Entities.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("PerfumeShop.Core.Models.ValueObjects.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("OrderHeaderId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("City");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("State");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("StreetAddress");

                            b1.HasKey("OrderHeaderId");

                            b1.ToTable("OrderHeaders");

                            b1.WithOwner()
                                .HasForeignKey("OrderHeaderId");
                        });

                    b.OwnsOne("PerfumeShop.Core.Models.ValueObjects.Cost", "Cost", b1 =>
                        {
                            b1.Property<int>("OrderHeaderId")
                                .HasColumnType("int");

                            b1.Property<decimal>("ItemsCost")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal")
                                .HasColumnName("ItemsCost");

                            b1.Property<decimal>("PromoCodeCost")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal")
                                .HasColumnName("PromoCodeCost");

                            b1.Property<decimal>("ShippingCost")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal")
                                .HasColumnName("ShippingCost");

                            b1.Property<decimal>("TotalCost")
                                .HasPrecision(10, 2)
                                .HasColumnType("decimal")
                                .HasColumnName("TotalCost");

                            b1.HasKey("OrderHeaderId");

                            b1.ToTable("OrderHeaders");

                            b1.WithOwner()
                                .HasForeignKey("OrderHeaderId");
                        });

                    b.OwnsOne("PerfumeShop.Core.Models.ValueObjects.Customer", "Customer", b1 =>
                        {
                            b1.Property<int>("OrderHeaderId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("CustomerName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("CustomerSurname");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<string>("ReceiptEmail")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("ReceiptEmail");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("UserId");

                            b1.HasKey("OrderHeaderId");

                            b1.ToTable("OrderHeaders");

                            b1.WithOwner()
                                .HasForeignKey("OrderHeaderId");
                        });

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("PerfumeShop.Core.Models.Entities.OrderHeader", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.PaymentDetail", b =>
                {
                    b.HasOne("PerfumeShop.Core.Models.Entities.OrderHeader", "Order")
                        .WithOne("PaymentDetail")
                        .HasForeignKey("PerfumeShop.Core.Models.Entities.PaymentDetail", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PerfumeShop.Core.Models.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PerfumeShop.Core.Models.Entities.OrderHeader", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PaymentDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
